/* -*- js2 -*- */
Ext.apply(Sube.Sub, {
  forPlayer : function(id) {
    var winId = id.replace(/_player$/, '');
    var win = Ext.getCmp(winId);
    return win.sub;
  }
});

Ext.apply(Sube.Sub.prototype,
{

  setVideo: function(callback) {
//    this.videoURI = 'http://content.bitsontherun.com/videos/3ta6fhJQ.flv'; // sample video
//    this.captionsURI = ''; // sample subtitle
//    return callback(this.videoURI); // for using sample video

    Ext.Msg.prompt('Video', 'Please enter the URI to the video file:', function(btn, uri){
                     if (btn == 'ok' && uri != '') {
                       var videoURI = undefined;
                       Ext.Ajax.request({
                         url: Sube.path_to('/js/sube/media_uri.json'),
                         params: {
                           uri : uri
                         },
                         success : function(response) {
                           videoURI = Ext.decode(response.responseText);
                         },
                         async : false
                       });
                       this.videoURI = videoURI;
                       if (typeof(callback) == 'function') { callback(uri); }
                     }
                     if (this.videoURI == null) {
                       Ext.Msg.alert('Alert', 'You must provide a valid media URI');
                     }
    }, this);
  },

  preview: function() {
    if (this.videoURI == null) {
      this.setVideo(this.preview.createDelegate(this));
      return;
    }
    this.savePreview(function() { this.playPause(true).defer(100); });
  },

  playPause: function(play) {
    if (this.player) {
      this.player.sendEvent('PLAY', (play || !!!this.player.playing));
    }
  },

  savePreview: function(callback) {
    this.grid.mask = new Ext.LoadMask(this.grid.getEl(), {msg: 'Saving captions..'});
    this.grid.mask.show();
    var records = [];
    this.grid.getStore().each(function(record) {
      records[records.length] = {
        from: record.get('from').format('h:i:s:u'),
        to: record.get('to').format('h:i:s:u'),
        text: record.get('text')
      };
      return true;
    });
    Ext.Ajax.request(
      { async : false,
        method : 'post',
        url : Sube.path_to('/preview/'+this.id),
        scope: this,
        success : function(response) {
          Ext.decode('function() { '+response.responseText+' }')();
          if (typeof callback == 'function') { this.whenPlayerReady(callback); }
          this.loadPlayer();
        },
        params: {
          videoURI: this.videoURI,
          records: Ext.util.JSON.encode(records)
        }
      });
  },

  saveGist: function() {
    this.grid.mask = new Ext.LoadMask(this.grid.getEl(), {msg: 'Saving captions..'});
    this.grid.mask.show();
    var el = Ext.getBody().createChild({tag: 'div'});
    var records = [];
    this.grid.getStore().each(function(record) {
      records[records.length] = {
        from: record.get('from').format('H:m:i:s:u'),
        to: record.get('to').format('H:m:i:s:u'),
        text: record.get('text')
      };
      return true;
    });
    el.load(
      {
       url: Sube.path_to('/save/gist/anon'),
       method: 'post',
       scripts: true,
       params: {
         videoURI: this.videoURI,
         winId: this.id,
         records: Ext.util.JSON.encode(records)
       }
    });
  },

  loadPlayer: function() {
    this.grid.mask.hide();

    var embed_id = this.id + '_player';
    var width = this.win.width - 20;
    var height = 250;

    Sube.log('Loading player for video: '+this.videoURI);

    var player = new SWFObject(Sube.path_to('/jwplayer/player.swf'),embed_id,width,height,'9');
    player.addParam('wmode','transparent');
    player.addParam('allowfullscreen','true');
    player.addParam('allowscriptaccess', 'always');
    player.addParam('id', embed_id);
    //player.addVariable('tracecall', 'Sube.Sub.forPlayer("'+embed_id+'").jwPlayerTrace'); // slowww
    player.addVariable('fullscreen','true');
    player.addVariable('autostart','false');
    player.addVariable('usecaptions','true');
    player.addVariable('channel', '0');
    player.addVariable('width', width);
    player.addVariable('height',height);
    player.addVariable('javascriptid', embed_id);
    player.addVariable('id', embed_id);
    player.addVariable('file', Ext.util.Format.htmlEncode(this.videoURI));
    player.addVariable('captions', Ext.util.Format.htmlEncode(this.captionsURI));

    player.write(this.video.body.id);

    this.showVideoArea();
  },

  showVideoArea: function() {
    this.video.show();
    this.video.expand();
    this.grid.mask.hide();
    this.win.render();
  },

  play: function(pause) {
    if (this.player) {
      Sube.log('SEND PLAY');
      this.player.sendEvent('PLAY', pause || 'true');
    }
  },

  whenPlayerReady: function(callback, args) {
    this.jwPlayerReady = this.jwPlayerReady.createSequence(callback, this, args);
  },

  jwPlayerTrace: function(obj) {
    Sube.log('Player '+this.id+': '+obj);
  },

  jwPlayerReady: function(obj) {
    var player = document.getElementById(obj.id);
    if (typeof player.getConfig == 'function') {
      this.player = player;
      var sub = 'Sube.Sub.forPlayer("'+obj.id+'").';
      this.player.addViewListener('PLAY', sub+'jwPlayerPlaying');
      Sube.log('Configured player: '+Ext.encode(player.getConfig()));
    } else {
      this.player = undefined; // no player
      Sube.log('Removed player: '+obj.id);
    }
    this.jwPlayerReady = this.jwPlayerSetup;
  },

  jwPlayerSetup : this.jwPlayerReady,

  jwPlayerPlaying : function(obj) {
    Sube.log('Playing '+this.videoURI+' => '+Ext.encode(obj));
    this.player.playing = !!!this.player.playing;
  },

  moveToCaption: function(position) {
    var sm = this.grid.getSelectionModel();
    this.grid.stopEditing();
    if (position == 'first') {
      sm.selectFirstRow();
    } else if (position == 'last') {
      sm.selectLastRow();
    } else if (position == 'next') {
      sm.selectNext(false);
    } else if (position == 'previous') {
      sm.selectPrevious(false);
    } else {
      return; // TODO implement it should be an row idx.
    }

    var idx = this.grid.getStore().indexOf(sm.getSelected());
    idx  = idx > 0 ? idx : 0;
    this.grid.startEditing(idx, 2);
  },

  moveCaption: function(position) {
    this.grid.stopEditing();
    var store = this.grid.getStore();
    var sm = this.grid.getSelectionModel();
    var selected = sm.getSelected();
    var idx = store.indexOf(selected);
    if (position == 'next' && sm.hasNext()) {
      idx += 1;
      var next = store.getAt(idx);
      store.remove(selected);
      store.remove(next);
      store.insert(idx - 1, [selected, next]);
    } else if (position == 'previous' && sm.hasPrevious()) {
      idx -= 1;
      var prev = store.getAt(idx);
      store.remove(selected);
      store.remove(prev);
      store.insert(idx, [prev, selected]);
    } else if (position == 'first' && store.getCount() > 2) {
      idx = 0;
      store.remove(selected);
      store.insert(idx, [selected]);
    } else if (position == 'last' && store.getCount() > 2) {
      store.remove(selected);
      idx = store.getCount();
      store.insert(idx, [selected]);
    }
    this.grid.startEditing(idx, 2);
  },

  delCaption: function(position) {
    var store = this.grid.getStore();
    var sm = this.grid.getSelectionModel();
    if (position == null) {
      store.remove(sm.getSelected());
    } else if (typeof position == 'number') {
      store.remove(store.getAt(position));
    }
  },

  newCaption: function(position) {
    var store = this.grid.getStore();
    var sm = this.grid.getSelectionModel();
    var from = Date.parseDate('00:00:00:00', 'h:i:s:u');
    var pos = store.getCount();
    var to = undefined;

    this.grid.stopEditing();

    if (position == 'previous' ) {
      if (sm.hasPrevious()) {
        var idx = store.indexOf(sm.getSelected());
        from = store.getAt(idx - 1).get('to').clone();
        to = store.getAt(idx).get('from').clone();
        pos = idx;
      } else {
        position = 'first';
      }
    }

    if (position == 'next') {
      if (sm.hasNext()) {
        var idx = store.indexOf(sm.getSelected());
        from = store.getAt(idx).get('to').clone();
        to = store.getAt(idx + 1).get('from').clone();
        pos = idx + 1;
      } else {
        position = 'last';
      }
    }

    if (position == 'first' && store.getCount() > 0) {
      var first = store.getAt(0);
      var first_from = first.get('from');
      to = first_from.clone();
      pos = 0;
    }

    if (position == 'last' && store.getCount() > 0) {
      var last = store.getAt(store.getCount() - 1);
      var last_to = last.get('to');
      from = last_to.clone();
    }

    if (to == undefined) { to = from.add(Date.SECOND, 2); }

    var record = new Ext.data.Record({ from: from, to: to, text:'Hola' });
    store.insert(pos, [record]);

    sm.selectRow(pos);
    this.grid.startEditing(pos, 2);
  },

  changeTime: function(fieldName, timeField, increment) {
    var store = this.grid.getStore();
    var sm = this.grid.getSelectionModel();
    var selectedRow = sm.getSelected();
    var date = selectedRow.get(fieldName);
    var idx = store.indexOf(selectedRow);
    this.grid.stopEditing();
    selectedRow.set(fieldName, date.add(timeField, increment));
  },

  addEditorHotKeys : function(comp) {
    var el = comp.el;
    var sub = null;
    var keys = [

      // Time editing keys
      {
        key: 'b',
        ctrl: true,
        shift: true,
        fn: this.changeTime.createDelegate(this,['from', Date.MINUTE, +1]),
        stopEvent: true
      },
      {
        key: 'v',
        ctrl: true,
        shift: true,
        fn: this.changeTime.createDelegate(this,['from', Date.MINUTE, -1]),
        stopEvent: true
      },
      {
        key: 'b',
        ctrl: true,
        fn: this.changeTime.createDelegate(this,['from', Date.SECOND, +1]),
        stopEvent: true
      },
      {
        key: 'v',
        ctrl: true,
        fn: this.changeTime.createDelegate(this,['from', Date.SECOND, -1]),
        stopEvent: true
      },
      {
        key: 'b',
        alt: true,
        shift: true,
        fn: this.changeTime.createDelegate(this,['to', Date.MINUTE, +1]),
        stopEvent: true
      },
      {
        key: 'v',
        alt: true,
        shift: true,
        fn: this.changeTime.createDelegate(this,['to', Date.MINUTE, -1]),
        stopEvent: true
      },
      {
        key: 'b',
        alt: true,
        fn: this.changeTime.createDelegate(this,['to', Date.SECOND, +1]),
        stopEvent: true
      },
      {
        key: 'v',
        alt: true,
        fn: this.changeTime.createDelegate(this,['to', Date.SECOND, -1]),
        stopEvent: true
      },

      // Add Caption keys
      {
        key: 'j\n\r', // new caption after current
        alt: true,
        ctrl: true,
        fn: this.newCaption.createDelegate(this, ['next']),
        stopEvent: true
      },
      {
        key: 'k', // new caption before current
        alt: true,
        ctrl: true,
        fn: this.newCaption.createDelegate(this, ['previous']),
        stopEvent: true
      },
      {
        key: 'h', // new caption at start
        alt: true,
        ctrl: true,
        fn: this.newCaption.createDelegate(this, ['first']),
        stopEvent: true
      },
      {
        key: 'l', // new caption at end
        alt: true,
        ctrl: true,
        fn: this.newCaption.createDelegate(this, ['last']),
        stopEvent: true
      },


      // Move Caption keys
      {
        key: 'j', // move caption down
        shift: true,
        ctrl: true,
        fn: this.moveCaption.createDelegate(this, ['next']),
        stopEvent: true
      },
      {
        key: 'k', // move caption up
        shift: true,
        ctrl: true,
        fn: this.moveCaption.createDelegate(this, ['previous']),
        stopEvent: true
      },
      {
        key: 'h', // move caption at start
        shift: true,
        ctrl: true,
        fn: this.moveCaption.createDelegate(this, ['first']),
        stopEvent: true
      },
      {
        key: 'l', // move caption at end
        shift: true,
        ctrl: true,
        fn: this.moveCaption.createDelegate(this, ['last']),
        stopEvent: true
      },


      // Movement keys
      {
        key: 'j\r\n', // move to next caption
        ctrl: true,
        fn: this.moveToCaption.createDelegate(this, ['next']),
        stopEvent: true
      },
      {
        key: 'k', // move to previous caption
        ctrl:  true,
        fn: this.moveToCaption.createDelegate(this, ['previous']),
        stopEvent: true
      },
      {
        key: 'h', // move to first caption
        ctrl:  true,
        fn: this.moveToCaption.createDelegate(this, ['first']),
        stopEvent: true
      },
      {
        key: 'l', // move to last caption
        ctrl:  true,
        fn: this.moveToCaption.createDelegate(this, ['last']),
        stopEvent: true
      },

      // playback keys
      {
        key: 'p',
        ctrl: true,
        fn: this.playPause.createDelegate(this, []),
        stopEvent: true
      }

    ];
    new Ext.KeyMap(el, keys);
  }

});

